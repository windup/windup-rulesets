<?xml version="1.0"?>
<ruleset xmlns="http://windup.jboss.org/schema/jboss-ruleset" id="SonicESBConfig"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://windup.jboss.org/schema/jboss-ruleset http://windup.jboss.org/schema/jboss-ruleset/windup-jboss-ruleset.xsd">
    <!--
        This ruleset contains rules that assist in migrating from Sonic ESB
        to Apache Camel.
    -->

    <rules>
        <rule id="SonicESB_InheritsXQService">
            <when>
                <javaclass references="com.sonicsw.xq.XQService">
                    <location>INHERITANCE</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <classification title="Sonic ESB Service" effort="0">
                        <link href="http://documentation.progress.com/output/Sonic/8.0.0/Docs8.0/api/esb_api/com/sonicsw/xq/XQService.html" title="XQService Javadoc"/>
                    </classification>
                    <hint effort="4">
                        <message><![CDATA[

                                Sonic ESB services inherit from XQService.  In Camel, this can be achieved through the simple Java Bean Camel Component.
                                * [Camel Java Bean Component](http://camel.apache.org/bean.html)

                        ]]></message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_TypeXQServiceContext">
            <when>
                <javaclass references="com.sonicsw.xq.XQServiceContext">
                    <location>TYPE</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="4">
                        <message><![CDATA[

                                Sonic ESB services leverage the service(XQServiceContext context) method to implement business logic.  When messages are routed to the service, the service(XQServiceContext context) method is executed.
                                In Camel, this is achieved by routing messages to the Java Bean via the Camel Route's Bean Component syntax.

                                * [Camel Java Bean Component](http://camel.apache.org/bean.html)
                                * [Camel Binding Annotations](http://camel.apache.org/parameter-binding-annotations.html)

                                Camel's Java Bean Component can leverage annotations annotations on the method to specify how Camel Message body values are mapped to the method parameters.  Additionally, the @Handler annotation can be leveraged to setup the default Java Bean method.

                                **For example:**

                                ```java
                                public void service(XQServiceContext ctx) throws XQServiceException {
                                    ...
                                }
                                ```

                                **Should become:**

                                ```java
                                @Handler
                                public void service(@Header messageHeader, @Body messageBody, Exchange exchange) {
                                    ...
                                }
                                ```

                                * org.apache.camel.Body
                                * org.apache.camel.Header
                                * org.apache.camel.Exchange


                        ]]></message>
                    </hint>
                </iteration>
            </perform>
        </rule>

        <rule id="SonicESB_TypeXQInitContext">
            <when>
                <javaclass references="com.sonicsw.xq.XQInitContext">
                    <location>TYPE</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="4">
                        <message><![CDATA[

                                The XQInitContext is used to receive initialization information for the service from Sonic ESB.

                                This is not neccessary for Camel.  The init() method that receives this object should be replaced with Spring Bean property injection.  For initialization beyond propery injection, leverage Spring's @PostConstruct annotation on this init() method.

                                * [Spring @PostConstruct Documentation](http://docs.spring.io/spring/docs/2.5.x/reference/beans.html#beans-postconstruct-and-predestroy-annotations)

                                ```java
                                @PostConstruct
                                public void init() {
                                    //leverage injected properties
                                }
                                ```


                        ]]></message>
                    </hint>
                </iteration>
            </perform>
        </rule>

        <rule id="SonicESB_METHODXQInitContext.getParameter">
            <when>
                <javaclass references="com.sonicsw.xq.XQInitContext.getParameter{*}">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1"><message>Migrate to Spring property injection.</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_METHODXQParameters.getParameter">
            <when>
                <javaclass references="com.sonicsw.xq.XQParameters.getParameter{*}">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1"><message>Migrate to Spring property injection.</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_TypeXQParameters">
            <when>
                <javaclass references="com.sonicsw.xq.XQParameters">
                    <location>TYPE</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1"><message>Migrate to Spring property injection.</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_TYpeXQParameterInfo">
            <when>
                <javaclass references="com.sonicsw.xq.XQParameterInfo">
                    <location>TYPE</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="3"><message>Migrate to Spring property injection.</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_TypeXQMessage">
            <when>
                <javaclass references="com.sonicsw.xq.XQMessage" as="default">
                    <location>TYPE</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="3"><message>Migrate to org.apache.camel.Message</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_MethodXQMessage.getHeaderValue">
            <when>
                <javaclass references="com.sonicsw.xq.XQMessage.getHeaderValue{*}">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="3"><message>Migrate to org.apache.camel.Message.getHeader(String name)</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_MethodXQMessage.setHeaderValue">
            <when>
                <javaclass references="com.sonicsw.xq.XQMessage.setHeaderValue{*}">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="3"><message>Migrate to org.apache.camel.Message.setHeader(String name, Object value)</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_XQMessage.getHeaderNames">
            <when>
                <javaclass references="com.sonicsw.xq.XQMessage.getHeaderNames{*}">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1"><message>Migrate to org.apache.camel.Message.getHeaders()</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_TypeXQPart">
            <when>
                <javaclass references="com.sonicsw.xq.XQPart">
                    <location>TYPE</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="3"><message>Migrate XQPart to an attachment on the org.apache.camel.Message</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_MethodXQMessage.getPartCount">
            <when>
                <javaclass references="com.sonicsw.xq.XQMessage.getPartCount{*}">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1"><message>Migrate to org.apache.camel.Message.getAttachments().size()</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_MethodXQMessage.getPart">
            <when>
                <javaclass references="com.sonicsw.xq.XQMessage.getPart({*}">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1"><message>Migrate to org.apache.camel.Message.getAttachment(String id)</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_TypeXQLog">
            <when>
                <javaclass references="com.sonicsw.xq.XQLog">
                    <location>TYPE</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1"><message>Migrate to SLF4J.</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_TypeXQServiceException">
            <when>
                <javaclass references="com.sonicsw.xq.XQServiceException">
                    <location>TYPE</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1">
                        <message><![CDATA[

                                Create a custom ServiceException class, extending Exception.  The documentation below explains exception handling in Camel.

                                    * [Camel Exception Handling](http://camel.apache.org/exception-clause.html)

                        ]]></message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_METHOD.XQMessage.getCorrelationId">
            <when>
                <javaclass references="com.sonicsw.xq.XQMessage.getCorrelationId{*}" as="default">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1">
                        <message><![CDATA[


                                Correlation is handled several ways in Camel.  Read the article below.

                                    * [Camel Exception Handling](http://camel.apache.org/correlation-identifier.html)


                        ]]></message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_METHOD.XQAddressFactory.createEndpointAddress">
            <when>
                <javaclass references="com.sonicsw.xq.XQAddressFactory.createEndpointAddress{*}" as="default">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="3">
                        <message><![CDATA[


                                This indicates that the Sonic ESB Service is routing messages to a [1...N] endpoints.  To achieve this in Camel, take the business logic in the service, and populate a header property with an array of target enpoints.
                                Next, create a Recipient List processor to route the message to N endpoints.

                                    * [Camel Recipient List](http://camel.apache.org/recipientlist-annotation.html)

                        ]]></message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_MethodXQServiceContext.addOutgoing">
            <when>
                <javaclass references="com.sonicsw.xq.XQServiceContext.addOutgoing{*}" as="default">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1">
                        <message><![CDATA[

                                Sonic ESB uses the addOutgoing method to set the outgoing message.
                                This is achieved in Camel by either modifying the @Body parameter in the Java Bean Component method, or literally setting a new message to the Exchange.

                                * [Camel Setting Response](http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html)

                        ]]></message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_TypeXQEnvelope">
            <when>
                <javaclass references="com.sonicsw.xq.XQEnvelope" as="default">
                    <location>TYPE</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="3"><message>Migrate to org.apache.camel.Exchange</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="SonicESB_MethodXQEnvelope.getMessage">
            <when>
                <javaclass references="com.sonicsw.xq.XQEnvelope.getMessage{*}">
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <iteration>
                    <hint effort="1"><message>Migrate to com.sonicsw.xq.XQEnvelope.getMessage.getIn()</message>
                    </hint>
                </iteration>
            </perform>
        </rule>
    </rules>
</ruleset>
