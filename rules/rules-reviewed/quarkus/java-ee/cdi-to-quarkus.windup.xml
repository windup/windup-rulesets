<?xml version="1.0"?>
<ruleset xmlns="http://windup.jboss.org/schema/jboss-ruleset" id="cdi-to-quarkus"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://windup.jboss.org/schema/jboss-ruleset http://windup.jboss.org/schema/jboss-ruleset/windup-jboss-ruleset.xsd">
    <metadata>
        <description>
            This ruleset gives hints to migrate CDI usage to Quarkus
        </description>
        <dependencies>
            <addon id="org.jboss.windup.rules,windup-rules-javaee,3.0.0.Final" />
            <addon id="org.jboss.windup.rules,windup-rules-java,3.0.0.Final" />
            <addon id="org.jboss.windup.rules,windup-rules-xml,3.0.0.Final" />
        </dependencies>
        <sourceTechnology id="java-ee" />
        <targetTechnology id="quarkus" />
    </metadata>
    <rules>
        <rule id="cdi-to-quarkus-00000">
            <when>
                <xmlfile in="pom.xml" matches="/m:project/m:dependencies/m:dependency[m:artifactId/text() = 'cdi-api' and m:groupId/text() = 'javax.enterprise' and (count(../m:dependency/m:groupId[contains(., 'io.quarkus')]) = 0)]" >
                    <namespace prefix="m" uri="http://maven.apache.org/POM/4.0.0" />
                </xmlfile>
            </when>
            <perform>
                <hint title="Replace javax.enterprise:cdi-api dependency" effort="1" category-id="mandatory">
                    <message>
                        Dependency `javax.enterprise:cdi-api` has to be replaced with `io.quarkus:quarkus-arc` artifact.
                    </message>
                    <link title="Quarkus - Guide" href="https://quarkus.io/guides/cdi-reference" />
                </hint>
            </perform>
        </rule>
        <!-- suggest to replace javax.inject dependency if no Quarkus dependency has been already added -->
        <rule id="cdi-to-quarkus-00020">
            <when>
                <xmlfile in="pom.xml" matches="/m:project/m:dependencies/m:dependency[m:artifactId/text() = 'javax.inject' and m:groupId/text() = 'javax.inject' and (count(../m:dependency/m:groupId[contains(., 'io.quarkus')]) = 0)]" >
                    <namespace prefix="m" uri="http://maven.apache.org/POM/4.0.0" />
                </xmlfile>
            </when>
            <perform>
                <hint title="Replace javax.inject:javax.inject dependency" effort="1" category-id="mandatory">
                    <message>
                        Dependency `javax.inject:javax.inject` has to be replaced with `io.quarkus:quarkus-arc` artifact.
                    </message>
                    <link title="Quarkus - Guide" href="https://quarkus.io/guides/cdi-reference" />
                </hint>
            </perform>
        </rule>
        <!-- explain beans.xml descriptor content is ignored -->
        <rule id="cdi-to-quarkus-00030">
            <when>
                <or>
                    <xmlfile in="beans.xml" matches="/b:beans">
                        <namespace prefix="b" uri="http://xmlns.jcp.org/xml/ns/javaee" />
                    </xmlfile>
                    <xmlfile in="beans.xml" matches="/b:beans">
                        <namespace prefix="b" uri="https://jakarta.ee/xml/ns/jakartaee" />
                    </xmlfile>
                </or>
            </when>
            <perform>
                <hint title="`beans.xml` descriptor content is ignored" effort="1" category-id="optional">
                    <message>
                        `beans.xml` descriptor content is ignored by Quarkus and can be removed from the application.
                        Refer to the guide referenced below to check the supported CDI feature in Quarkus.
                    </message>
                    <link title="Quarkus - CDI reference - Bean discovery" href="https://quarkus.io/guides/cdi-reference#bean_discovery" />
                </hint>
            </perform>
        </rule>
        <rule id="cdi-to-quarkus-00031">
            <when>
                <or>
                    <xmlfile in="beans.xml" matches="/b:beans/b:interceptors">
                        <namespace prefix="b" uri="http://xmlns.jcp.org/xml/ns/javaee" />
                    </xmlfile>
                    <xmlfile in="beans.xml" matches="/b:beans/b:interceptors">
                        <namespace prefix="b" uri="https://jakarta.ee/xml/ns/jakartaee" />
                    </xmlfile>
                </or>
            </when>
            <perform>
                <hint title="Annotate Interceptor classes" effort="1" category-id="mandatory">
                    <message>
                        <![CDATA[
                        `beans.xml` descriptor content is ignored, and therefore interceptor beans must
                        directly be annotated with `@Interceptor` instead, so a beans.xml configuration like:
                        ```
                          <interceptors>
                            <class>com.acme.intercept.TransactionInterceptor</class>
                          </interceptors>
                        ```
                        would turn into:
                        ```
                        @Interceptor
                        public class TransactionInterceptor { ... }
                        ```
                        ]]>
                    </message>
                    <link title="Quarkus - CDI reference - Bean discovery" href="https://quarkus.io/guides/cdi-reference#bean_discovery" />
                </hint>
            </perform>
        </rule>
        <rule id="cdi-to-quarkus-00032">
            <when>
                <or>
                    <xmlfile in="beans.xml" matches="/b:beans/b:decorators">
                        <namespace prefix="b" uri="http://xmlns.jcp.org/xml/ns/javaee" />
                    </xmlfile>
                    <xmlfile in="beans.xml" matches="/b:beans/b:decorators">
                        <namespace prefix="b" uri="https://jakarta.ee/xml/ns/jakartaee" />
                    </xmlfile>
                </or>
            </when>
            <perform>
                <hint title="Annotate Decorator classes" effort="1" category-id="mandatory">
                    <message>
                        <![CDATA[
                        `beans.xml` descriptor content is ignored, and therefore decorator beans must
                        directly be annotated with `@Interceptor` instead, so a beans.xml configuration like:
                        ```
                          <decorators>
                            <class>com.acme.decorate.BigAccountDecorator</class>
                          </decorators>
                        ```
                        would turn into:
                        ```
                        @Decorator
                        public class BigAccountDecorator { ... }
                        ```
                        ]]>
                    </message>
                    <link title="Quarkus - CDI reference - Bean discovery" href="https://quarkus.io/guides/cdi-reference#bean_discovery" />
                </hint>
            </perform>
        </rule>
        <rule id="cdi-to-quarkus-00033">
            <when>
                <or>
                    <xmlfile in="beans.xml" matches="/b:beans/b:stereotypes">
                        <namespace prefix="b" uri="http://xmlns.jcp.org/xml/ns/javaee" />
                    </xmlfile>
                    <xmlfile in="beans.xml" matches="/b:beans/b:stereotypes">
                        <namespace prefix="b" uri="https://jakarta.ee/xml/ns/jakartaee" />
                    </xmlfile>
                </or>
            </when>
            <perform>
                <!-- TODO: check out how exactly alternatives/stereotypes work -->
                <hint title="Annotate Stereotype classes" effort="1" category-id="mandatory">
                    <message>
                        <![CDATA[
                        `beans.xml` descriptor content is ignored, and therefore stereotype beans must
                        directly be annotated with `@Stereotype` instead, so a beans.xml configuration like:
                        ```
                          <stereotypes>
                            <class>com.acme.decorate.BigAccountDecorator</class>
                          </stereotypes>
                        ```
                        would turn into:
                        ```
                        @Decorator
                        public class BigAccountDecorator { ... }
                        ```
                        ]]>
                    </message>
                    <link title="Quarkus - CDI reference - Bean discovery" href="https://quarkus.io/guides/cdi-reference#bean_discovery" />
                </hint>
            </perform>
        </rule>
        <rule id="cdi-to-quarkus-00034">
            <when>
                <or>
                    <xmlfile in="beans.xml" matches="/b:beans[@bean-discovery-mode = 'all' or @bean-discovery-mode = 'none']">
                        <namespace prefix="b" uri="http://xmlns.jcp.org/xml/ns/javaee" />
                    </xmlfile>
                    <xmlfile in="beans.xml" matches="/b:beans[@bean-discovery-mode = 'all' or @bean-discovery-mode = 'none']">
                        <namespace prefix="b" uri="https://jakarta.ee/xml/ns/jakartaee" />
                    </xmlfile>
                </or>
            </when>
            <perform>
                <hint title="`beans.xml` discovery mode must be taken into account" effort="1" category-id="optional">
                    <message>
                        `beans.xml` descriptor content is ignored by Quarkus. The `bean-discovery-mode` attribute must be 
                        taken into account when migrating to Quarkus in the following manner:
                        - ANNOTATED: no change in annotations; this is Quarkus' default (only pick up beans with bean-discovery annotations)
                        - ALL: all classes with bean-defining annotations are picked up, but also any class that meets the requirements
                        for a managed bean is picked up and given the default `@Dependent` scope (see links below)
                        
                        Refer to the guide referenced below to check the supported CDI feature in Quarkus.
                    </message>
                    <link title="Quarkus - CDI reference - Bean discovery" href="https://quarkus.io/guides/cdi-reference#bean_discovery" />
                    <link title="JavaEE tutorial: About CDI Managed Beans" href="https://docs.oracle.com/javaee/7/tutorial/cdi-basic004.htm" />
                </hint>
            </perform>
        </rule>
        <rule id="cdi-to-quarkus-00040">
            <when>
                <javaclass references="javax.enterprise.inject.Produces">
                    <location>ANNOTATION</location>
                </javaclass>
            </when>
            <perform>
                    <hint title="Producer annotation no longer required" effort="1" category-id="potential">
                        <message>In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier.
                            This field could be accessed using a `@Named` getter method instead.
                        </message>
                        <link title="Quarkus Simplified Producer Method Declaration" href="https://quarkus.io/guides/cdi-reference#simplified-producer-method-declaration"/>
                    </hint>
            </perform>
        </rule>
        <rule id="cdi-to-quarkus-00050">
            <when>
                <javaclass references="javax.ejb.Stateless">
                    <location>ANNOTATION</location>
                </javaclass>
            </when>
            <perform>
                    <hint title="Stateless annotation can be replaced with scope" effort="1" category-id="potential">
                        <message>Stateless EJBs can be converted to a cdi bean by replacing the `@Stateless` annotation with a scope eg `@ApplicationScoped`
                        </message>
                        <link title="Quarkus CDI reference" href="https://quarkus.io/guides/cdi-reference"/>
                    </hint>
            </perform>
        </rule>
    </rules>
</ruleset>
