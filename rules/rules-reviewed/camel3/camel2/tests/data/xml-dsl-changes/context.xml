<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <bean id="function1" class="org.jboss.qe.camel.components.xslt.extensions.MyExtensionFunction1"/>
    <bean id="function2" class="org.jboss.qe.camel.components.xslt.extensions.MyExtensionFunction2"/>
    <bean id="aggregationStrategy" class="org.apache.camel.util.toolbox.XsltAggregationStrategy">
        <constructor-arg value="/xslt/aggregationStrategy.xsl"/>
    </bean>
    <camelContext id="test-camel-context" xmlns="http://camel.apache.org/schema/spring" autoStartup="true">
        <dataFormats>
            <jaxb id="myJaxb" prettyPrint="true" contextPath="org.apache.camel.example"/>
            <zip id="myzip" prettyPrint="true" contextPath="org.apache.camel.example"/>
            <gzip id="mygzip" prettyPrint="true" contextPath="org.apache.camel.example"/>
        </dataFormats>
        <route>
            <from uri="telegram:endpoint1"/>
            <to uri="browse:orderReceived"/>
            <to uri="bean:bye"/>
        </route>
        <route>
            <from uri="telegram:foo?autorizationToken=wasd"/>
            <to uri="direct-vm:bar"></to>

        </route>
        <route>
            <from uri="scheduler://foo?delay=60s"/>
            <to uri="seda:next"/>
            <to uri="stub:smtp://somehost.foo.com?user=windup"/>
        </route>
        <route>
            <from uri="vm:bar?concurrentConsumers=5"/>
            <to uri="validator:org/apache/camel/component/validator/schema.xsd?headerName=headerToValidate&amp;failOnNullHeader=false"/>
        </route>

        <route>
            <from uri="direct:start"/>
            <unmarshal>
                <zipFile/>
            </unmarshal>
            <loadBalance>
                <custom ref="myCustomLoadBalancer"/>
                <to uri="mock:x"/>
                <to uri="mock:y"/>
            </loadBalance>
        </route>

        <route>
            <from uri="direct:circuit-breaker"/>
            <setProperty propertyName="foo"><simple>Hello ${body}</simple></setProperty>
            <hystrix>
                <to uri="http://fooservice.com/slow"/>
                <onFallback>
                    <transform>
                        <constant>Fallback message</constant>
                    </transform>
                </onFallback>
            </hystrix>
            <to uri="mock:result"/>
        </route>
    </camelContext>
</beans>
