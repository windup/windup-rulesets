<?xml version="1.0"?>
<ruleset xmlns="http://windup.jboss.org/schema/jboss-ruleset" id="xml-moved-components"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://windup.jboss.org/schema/jboss-ruleset http://windup.jboss.org/schema/jboss-ruleset/windup-jboss-ruleset.xsd">
    <metadata>
        <description>
            Rules for changes in XML file (e.g. pom.xml) to run on Apache Camel 3
        </description>
        <dependencies>
            <addon id="org.jboss.windup.rules,windup-rules-java,3.0.0.Final"/>
        </dependencies>
        <sourceTechnology id="camel" versionRange="[2,3)"/>
        <targetTechnology id="camel" versionRange="[3,)"/>
    </metadata>
    <rules>
<!-- Rules moved to xml-moved-components.windup.groovy
        <rule id="xml-moved-components-00000">
        <rule id="xml-moved-components-00001">
        <rule id="xml-moved-components-00002">
        <rule id="xml-moved-components-00003">
        <rule id="xml-moved-components-00004">
        <rule id="xml-moved-components-00005">

        <rule id="xml-moved-components-00006">
        <rule id="xml-moved-components-00007">
        <rule id="xml-moved-components-00008">
        <rule id="xml-moved-components-00009">
        <rule id="xml-moved-components-00010">
        <rule id="xml-moved-components-00011">

        -->
        <rule id="xml-moved-components-00012">
            <when>
                <javaclass references="org.apache.camel.util.component.{*}" as="javaClass">
                    <location>IMPORT</location>
                </javaclass>
            </when>
            <perform>
                <iteration over="javaClass">
                    <hint title="The classes from `org.apache.camel.util.component` have been moved" effort="1" category-id="mandatory">
                        <message>All the classes from `org.apache.camel.util.component` have been moved to `org.apache.camel.support.component`.
                            `org.apache.camel:camel-support` is a transitive dependency of `camel-core` but it could be used also separately to trim the application size.
                        </message>
                        <link href="https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_modularization_of_camel_core"
                                title="Camel 3 - Migration Guide"/>
                        <link href="https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_modularization_of_camel_core"
                              title="Camel 3 - Migration Guide: Modularization of camel-core"/>
                    </hint>
                </iteration>
            </perform>
        </rule>
        <rule id="xml-moved-components-00013">
            <when>
                <javaclass references="org.apache.camel.impl.{moved}" as="javaClass">
                    <location>IMPORT</location>
                </javaclass>
            </when>
            <perform>
                <iteration over="javaClass">
                    <hint title="`org.apache.camel.impl.{moved}` class has been moved" effort="1" category-id="mandatory">
                        <message>The class `org.apache.camel.impl.{moved}` has been moved to `org.apache.camel.impl.engine` package in `camel-base` dependency.
                            `org.apache.camel:camel-base` is a transitive dependency of `camel-core` but it could be used also separately to trim the application size.
                        </message>
                        <link href="https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_generic_information"
                                title="Camel 3 - Migration Guide: General information"/>
                        <link href="https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_modularization_of_camel_core"
                              title="Camel 3 - Migration Guide: Modularization of camel-core"/>
                    </hint>
                </iteration>
            </perform>
            <where param="moved">
                <matches
                        pattern="(CamelPostProcessorHelper|DefaultAsyncProcessorAwaitManager|DefaultCamelBeanPostProcessor|DefaultCamelContextNameStrategy|DefaultClaimCheckRepository|DefaultClassResolver|DefaultComponentResolver|DefaultConsumerTemplate|DefaultDataFormatResolver|DefaultEndpointRegistry|DefaultEndpointUtilizationStatistics|DefaultFactoryFinder|DefaultFactoryFinderResolver|DefaultHeadersMapFactory|DefaultInflightRepository|DefaultInjector|DefaultLanguageResolver|DefaultManagementNameStrategy|DefaultMessageHistoryFactory|DefaultNodeIdFactory|DefaultPackageScanClassResolver|DefaultProcessorFactory|DefaultProducerTemplate|DefaultRoute|DefaultRouteContext|DefaultRouteController|DefaultRouteError|DefaultRouteStartupOrder|DefaultRuntimeEndpointRegistry|DefaultShutdownStrategy|DefaultStreamCachingStrategy|DefaultTransformerRegistry|DefaultUnitOfWork|DefaultUnitOfWorkFactory|DefaultUuidGenerator|DefaultValidatorRegistry|DeferProducer|DeferServiceStartupListener|DurationRoutePolicy|DurationRoutePolicyFactory|EndpointKey|EventDrivenConsumerRoute|EventNotifierCallback|ExplicitCamelContextNameStrategy|FileStateRepository|HashMapHeadersMapFactory|HeadersMapFactoryResolver|InterceptSendToEndpointProcessor|InterceptSendToMockEndpointStrategy|JavaUuidGenerator|LimitedPollingConsumerPollStrategy|MDCUnitOfWork|MemoryStateRepository|SubscribeMethodProcessor|SupervisingRouteController|SupervisingRouteController.FilterResult|SupervisingRouteControllerFilters|SupervisingRouteControllerFilters.BlackList|TypedProcessorFactory|WebSpherePackageScanClassResolver)"/>
            </where>
        </rule>
        <rule id="xml-moved-components-00014">
            <when>
                <javaclass references="org.apache.camel.main.Main" as="javaClass">
                    <location>IMPORT</location>
                </javaclass>
            </when>
            <perform>
                <iteration over="javaClass">
                    <when>
                        <not>
                            <project>
                                <artifact groupId="org.apache.camel" artifactId="camel-main" />
                            </project>
                        </not>
                    </when>
                    <perform>
                        <hint title="`org.apache.camel.main.Main` class has been moved" effort="1" category-id="mandatory">
                            <message>The class `org.apache.camel.main.Main` has been moved out of `org.apache.camel:camel-core` and into its own JAR named `org.apache.camel:camel-main`.
                                `org.apache.camel:camel-main` has to be added as a dependency to your project pom.xml file
                            </message>
                            <link href="https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_main_class"
                                  title="Camel 3 - Main class"/>
                        </hint>
                    </perform>
                </iteration>
            </perform>
        </rule>
        <rule id="xml-moved-components-00015">
            <when>
                <xmlfile as="dependencies-block" in="pom.xml"
                         matches="/m:project/m:dependencies[count(m:dependency/m:artifactId[text()='camel-management'])=0 and count(m:dependency/m:artifactId[text()='camel-core'])>0]">
                    <namespace prefix="m" uri="http://maven.apache.org/POM/4.0.0"/>
                </xmlfile>
            </when>
            <perform>
                <iteration over="dependencies-block">
                    <hint title="JMX is disable by default" effort="1" category-id="potential">
                        <message>If you run Camel standalone with just `camel-core` as a dependency, and you want JMX enabled out of the box, then you need to add `org.apache.camel:camel-management` as a dependency.
                        </message>
                        <link href="https://camel.apache.org/manual/latest/camel-3-migration-guide.html#_jmx" title="Camel 3 - JMX"/>
                    </hint>
                </iteration>
            </perform>
        </rule>
    </rules>
</ruleset>

