<?xml version="1.0"?>
<ruleset id="session"
    xmlns="http://windup.jboss.org/schema/jboss-ruleset"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://windup.jboss.org/schema/jboss-ruleset http://windup.jboss.org/schema/jboss-ruleset/windup-jboss-ruleset.xsd">
    <metadata>
        <description>
            This is a simple ruleset for detecting usage of data storage in HTTP session objects when migrating an application to a cloud environment.
        </description>
        <dependencies>
          <addon id="org.jboss.windup.rules,windup-rules-javaee,3.0.0.Final"/>
          <addon id="org.jboss.windup.rules,windup-rules-java,3.0.0.Final"/>
        </dependencies>
        <sourceTechnology id="java"/>
        <sourceTechnology id="java-ee"/>
        <targetTechnology id="cloud-readiness"/>
        <targetTechnology id="openshift"/>
        <tag>clustering</tag>
    </metadata>
    <rules>
        <rule id="session-00000">
            <when>
              <xmlfile matches="/w:web-app/w:distributable">
                  <namespace prefix="w" uri="http://java.sun.com/xml/ns/javaee"/>
              </xmlfile>
            </when>
            <perform>
                <hint title="HTTP Session replication" effort="3" category-id="cloud-mandatory">
                    <message>
                    <![CDATA[
                       Session replication ensures that client sessions are not disrupted by failovers of nodes in a cluster.  
                       Each node in the cluster shares information about ongoing sessions and can take over sessions if a node disappears.  
                       The `<distributable/>` tag inside the `<web-app>` tag of applicationâ€™s `web.xml` descriptor file enables the application's sessions clustering [1].  
                       
                       In a cloud environment it has to be considered that the data in the memory of a running container can be wiped out by a restart (triggered by code deploy, config change, or the execution environment relocating the process to a different physical location)[2].  
                       
                       Different approaches can be followed:
                       
                       * review session replication's usage and make sure it is configured properly (effort 3) [3]
                       * rearchitect the application and consider storing sessions in a cache backing service (effort 7) [6][7][4][5]
                       * disable HTTP session clustering and accept its implications
                       
                       The second approach (using a cache backing service) has some benefits:
                       
                       * Increased application scalability and elasticity. By offloading the session data off to a remote Data Grid, the application tier itself can be more scalable and elastic. 
                       * Session Persistence. By offloading session data to a remote data grid, the application itself will be able to survive EAP node failures since the a JVM failure will not cause the session data to be lost. 
                       * Session Data Sharing. If you have a requirement for multiple applications to be able to share session data, this solution might be able to solve that use case as well.
                       
                       References:
                       
                       1. [JBoss EAP - Clustering in Web Applications](https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.0/html/development_guide/clustering_in_web_applications)
                       2. [Twelve-factor app - Processes](https://12factor.net/processes)
                       3. [OpenShift - JBoss EAP Clustering](https://access.redhat.com/documentation/en-us/red_hat_jboss_middleware_for_openshift/3/html-single/red_hat_jboss_enterprise_application_platform_for_openshift/#clustering)
                       4. [Twelve-factor app - Backing services](https://12factor.net/backing-services) 
                       5. [Red Hat JBoss Data Grid for OpenShift](https://access.redhat.com/documentation/en-us/red_hat_jboss_middleware_for_openshift/3/html/red_hat_jboss_data_grid_for_openshift/)
                       6. [JBoss EAP - Externalize HTTP Sessions to JBoss Data Grid](https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.0/html/configuration_guide/configuring_high_availability#externalize-http-sessions-to-jdg)
                       7. [Developer blog post - Externalize HTTP Session Data to the JBoss Data Grid](https://developers.redhat.com/blog/2015/11/23/externalize-http-session-data-to-jboss-data-grid/)
                     ]]>
                    </message>
                    <tag>clustering</tag>
                </hint>
            </perform>
        </rule>

        <rule id="session-00001">
            <when>
               <or>
                <javaclass references="javax.servlet.http.HttpSession.setAttribute({*})"/>
                <javaclass references="javax.servlet.http.HttpSession.putValue({*})"/>
                </or>
            </when>
            <perform>
                <hint title="HTTP Session data storage" effort="3" category-id="cloud-optional">
                    <message>
                    <![CDATA[
                    The servlet container uses HttpSession to create a session between an HTTP client and an HTTP server.  
                    The session persists for a specified time period, across more than one connection or page request from the user.  
                    `HttpSession.setAttribute` method allows user information to persist across multiple user connections  
                    Warning: As of Java Servlet Version 2.2, the `javax.http.HTTPSession.putValue(java.lang.String name,java.lang.Object value)` method is deprecated and replaced by `javax.http.HttpSession.setAttribute(java.lang.String, java.lang.Object)`  
                    
                    In a cloud environment it has to be considered that the data in the memory of a running container can be wiped out by a restart (triggered by code deploy, config change, or the execution environment relocating the process to a different physical location)[1].  
                    Consider storing HTTPSession data to a cache backing service[2][3][4][5]  
                    This approach has some benefits:
                    
                    * Increased application scalability and elasticity. By offloading the session data off to a remote Data Grid, the application tier itself can be more scalable and elastic. 
                    * Session Persistence. By offloading session data to a remote data grid, the application itself will be able to survive EAP node failures since the a JVM failure will not cause the session data to be lost. 
                    * Session Data Sharing. If you have a requirement for multiple applications to be able to share session data, this solution might be able to solve that use case as well.
                    
                    References:
                    
                    1. [Twelve-factor app - Processes](https://12factor.net/processes)
                    2. [JBoss EAP - Externalize HTTP Sessions to JBoss Data Grid](https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.0/html/configuration_guide/configuring_high_availability#externalize-http-sessions-to-jdg)
                    3. [Developer blog post - Externalize HTTP Session Data to the JBoss Data Grid](https://developers.redhat.com/blog/2015/11/23/externalize-http-session-data-to-jboss-data-grid/) 
                    4. [Twelve-factor app - Backing services](https://12factor.net/backing-services) 
                    5. [Red Hat JBoss Data Grid for OpenShift](https://access.redhat.com/documentation/en-us/red_hat_jboss_middleware_for_openshift/3/html/red_hat_jboss_data_grid_for_openshift/) 
                    ]]>
                    </message>
                    <tag>clustering</tag>
                </hint>
            </perform>
        </rule>
    </rules>
</ruleset>
