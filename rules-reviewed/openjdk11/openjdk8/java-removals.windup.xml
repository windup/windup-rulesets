<?xml version="1.0"?>
<ruleset xmlns="http://windup.jboss.org/schema/jboss-ruleset" id="java-removals"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://windup.jboss.org/schema/jboss-ruleset http://windup.jboss.org/schema/jboss-ruleset/windup-jboss-ruleset.xsd">
    <metadata>
        <description>
            This ruleset provides analysis with respect to API removals between OpenJDK 8 and 11.
        </description>
        <dependencies>
            <addon id="org.jboss.windup.rules,windup-rules-java,3.0.0.Final" />
        </dependencies>
        <sourceTechnology id="openjdk" versionRange="(,8]"/>
        <targetTechnology id="openjdk" versionRange="[11,)"/>
    </metadata>
    <rules>
        <rule id="java-removals-00000">
            <when>
                <or>
                <javaclass references="java.lang.Thread.stop({.+})">
                    <location>METHOD_CALL</location>
                </javaclass>
                <javaclass references="java.lang.Thread.destroy({*})">
                    <location>METHOD_CALL</location>
                </javaclass>
                </or>
            </when>
            <perform>
                <hint title="Methods in `java.lang.Thread` have been removed" effort="3" category-id="mandatory">
                    <message>
                        The `java.lang.Thread.stop(Throwable)` method has been removed, as it is dangerous for a thread to not only be able to directly stop another thread, but with an exception it may not expect. Instead, the thread should be notified to stop using a shared variable or `interrupt()`.
                        The `java.lang.Thread.destroy()` method was never even implemented and just throws `NoSuchMethodError`.
                    </message>
                    <link title="Java Thread Primitive Deprecation" href="https://docs.oracle.com/javase/7/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html"/>
                </hint>
            </perform>
        </rule>
        <rule id="java-removals-00010">
            <when>
                <javaclass references="sun.reflect.Reflection{*}">
                    <location>IMPORT</location>
                    <location>METHOD_CALL</location>
                </javaclass>
            </when>
            <perform>
                <hint title="sun.reflect.Reflection class was deprecated in Java 9" effort="1" category-id="mandatory">
                    <message>
                        Java 9 introduced the `StackWalker API` to replace `sun.reflect.Reflection`. 
                        As such, the use of `sun.reflect.Reflection` class and particular the `getCallerClass` method should no longer be needed. 
                        Refer to the example changeset linked below.
                    </message>
                    <link title="Example changeset" href="https://hg.openjdk.java.net/openjfx/9-dev/rt/rev/70f6fa01a32c"/>
                </hint>
            </perform>
        </rule>
        <rule id="java-removals-00020">
            <when>
                <javaclass references="sun.reflect.CallerSensitive{*}">
                    <location>IMPORT</location>
                    <location>ANNOTATION</location>
                </javaclass>
            </when>
            <perform>
                <hint title="sun.reflect.CallerSensitive annotation was deprecated in Java 9" effort="1" category-id="mandatory">
                    <message>
                        `sun.reflect.CallerSensitive` annotation was deprecated in Java 9.
                        Refer to the example changeset linked below. 
                    </message>
                    <link title="Example changeset" href="https://hg.openjdk.java.net/openjfx/9-dev/rt/rev/70f6fa01a32c"/>
                </hint>
            </perform>
        </rule>
        <rule id="java-removals-00030">
            <when>
                <javaclass references="javax.security.auth.Policy"/>
            </when>
            <perform>
                <hint title="The `javax.security.auth.Policy` class has been removed" effort="3" category-id="mandatory">
                    <message>
                        <![CDATA[
                        The `javax.security.auth.Policy` class has been removed.
                        It should be replaced by the use of `java.security.Policy` and `java.security.ProtectionDomain`.
                        Usage of `policy.getPermissions(subject,codeSource)` should be  replaced with a call to
                        policy.getPermissions passing in a new ProtectionDomain (see links below for details)
                        ]]>
                    </message>
                    <link title="Java 10 javax.security.auth.Policy api" href="https://docs.oracle.com/javase/10/docs/api/javax/security/auth/Policy.html"/>
                    <link title="Java 11 java.security.Policy api" href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/Policy.html"/>
                </hint>
            </perform>
        </rule>
        <rule id="java-removals-00040">
            <when>
                <javaclass references="java.lang.SecurityManager.{method-name}({*})"></javaclass>
            </when>
            <perform>
                <hint title="AWT SecurityManager method java.lang.SecurityManager.{method-name} has been removed in Java 11" effort="1" category-id="mandatory">
                    <message>
                        Due to modularisation, the methods `java.lang.SecurityManager.checkAwtEventQueueAccess()`,
                        `java.lang.SecurityManager.checkSystemClipboardAccess()` and
                        `java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object)`
                        have been removed, so that the core SecurityManager class does not depend on the AWT stack.

                        Replace with a call to `java.lang.SecurityManager.checkPermission(java.security.Permission)` as follows:

                        `java.lang.SecurityManager.checkAwtEventQueueAccess()` --> `java.lang.SecurityManager.checkPermission(new AWTPermission("accessEventQueue"))`
                        `java.lang.SecurityManager.checkSystemClipboardAccess()` --> `java.lang.SecurityManager.checkPermission(new AWTPermission("accessClipboard"))`
                        `java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object) --> java.lang.SecurityManager.checkPermission(new AWTPermission("showWindowWithoutWarningBanner"))`
                    </message>
                    <link title="Java 11 SecurityManager api" href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/SecurityManager.html"/>
                    <link title="Java 11 AWTPermission api" href="https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/AWTPermission.html"/>
                </hint>
            </perform>
            <where param="method-name">
               <matches pattern="(checkAwtEventQueueAccess|checkSystemClipboardAccess|checkTopLevelWindow)"/>
            </where>
        </rule>
        <rule id="java-removals-00100">
            <when>
                <or>
                    <javaclass references="java.util.jar.Pack200.Packer.addPropertyChangeListener({*})"/>
                    <javaclass references="java.util.jar.Pack200.Packer.removePropertyChangeListener({*})"/>
                    <javaclass references="java.util.jar.Pack200.Unpacker.addPropertyChangeListener({*})"/>
                    <javaclass references="java.util.jar.Pack200.Unpacker.removePropertyChangeListener({*})"/>
                </or>
            </when>
            <perform>
                <hint title="Property listener methods on `Pack200.Packer` and `Pack200.Unpacker` have been removed" effort="3" category-id="mandatory">
                    <message>
                        Property listener methods on `Pack200.Packer` and `Pack200.Unpacker` have been removed.
                        Instead, a strategy based on polling the `PROGRESS` value maintained by `java.util.jar.Pack200.Packer`
                        or `java.util.jar.Pack200.Unpacker` is recommended.
                    </message>
                    <link title="java.util.jar.Packer API" href="https://docs.oracle.com/javase/8/docs/api/java/util/jar/Pack200.Packer.html"/>
                    <link title="java.util.jar.Unpacker API" href="https://docs.oracle.com/javase/8/docs/api/java/util/jar/Pack200.Unpacker.html"/>
                </hint>
            </perform>
        </rule>
        <rule id="java-removals-00110">
            <when>
                <javaclass references="sun.misc.Unsafe.{method-name}({*})"/>
            </when>
            <perform>
                <hint title="Methods in `sun.misc.Unsafe` have been removed" effort="2" category-id="mandatory">
                    <message>
                        The `sun.misc.Unsafe` API is scheduled for removal in the long term, and some of its methods have been removed. In short term, please consider the following:

                        - The `get` and `put` methods have equivalents that take long offsets (OpenJDK 8's version of the removed methods just casts the int offsets and used the long versions).
                        - `fieldOffset(Field)` should be replaced by `staticFieldOffset(Field)` and `ObjectFieldOffset(Field)`.
                        - `staticFieldBase(Class)` should be replaced by asking for a specific field with `staticFieldBase(Field)`. The removed method only returned the address of the first static field in the class and relied on the assumption that the JVM stored all statics together, which may not be true.
                        - `tryMonitorEnter(Object)` and `monitorExit(Object)` can be replaced with use of the Java synchronized primitives, as illustrated in the test changes for JDK-8054494 (see links below).

                        In the long term, please consider using Variable Handles (see the link below)
                    </message>
                    <link href="https://hg.openjdk.java.net/jdk9/jdk9/jdk/rev/0a0a0986400e#l2.19" title="Test changes for JDK-8054494"/>
                    <link href="https://openjdk.java.net/jeps/193" title="Variable Handles"/>
                </hint>
            </perform>
            <where param="method-name">
                <matches pattern="(getInt|putInt|getFloat|putFloat|getDouble|putDouble|getBoolean|putBoolean|getObject|putObject|getByte|putByte|getChar|putChar|getShort|putShort|getLong|putLong|fieldOffset|staticFieldBase|tryMonitorEnter|monitorEnter|monitorExit)"/>
            </where>
        </rule>
        <rule id="java-removals-00101">
            <when>
                <javaclass references="sun.misc.BASE64{encoder-decoder}{*}"/>
            </when>
            <perform>
                <hint title="The `sun.misc.BASE64{encoder-decoder}` class has been removed" effort="1" category-id="mandatory">
                    <message>
                        The `sun.misc.BASE64{encoder-decoder}` class has been removed. Replace with `java.util.Base64.getMime{encoder-decoder}`.
                    </message>
                    <link title="Code example" href="https://hg.openjdk.java.net/jdk8/jdk8/jdk/rev/9078c34437ab"/>
                    <link title="Original enhancement request" href="https://bugs.openjdk.java.net/browse/JDK-8006182"/>
                </hint>
            </perform>
            <where param="encoder-decoder">
                <matches pattern="(Encoder|Decoder)"/>
            </where>
        </rule>
    </rules>
</ruleset>
